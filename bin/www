#!/usr/bin/env node

/**
 * Module dependencies.
 */

 var app = require('../app');
 var debug = require('debug')('testnode:server');
 var http = require('http');

/**
 * Get port from environment and store in Express.
 */

 var port = normalizePort(process.env.PORT || '3000');
 app.set('port', port);

/**
 * Create HTTP server.
 */

 var server = http.createServer(app);

 var io = require("socket.io")(server);
/**
 * Listen on provided port, on all network interfaces.
 */

 server.listen(port);
 server.on('error', onError);
 server.on('listening', onListening);

 io.on('connection', onConnecting);

/**
 * Normalize a port into a number, string, or false.
 */

 function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

 function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string' ?
    'Pipe ' + port :
    'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
        console.error(bind + ' requires elevated privileges');
        process.exit(1);
        break;
        case 'EADDRINUSE':
        console.error(bind + ' is already in use');
        process.exit(1);
        break;
        default:
        throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

 function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string' ?
    'pipe ' + addr :
    'port ' + addr.port;
    debug('Listening on ' + bind);
}

/**
 * list user connect to server
 */
 var currentUser = {};

/**
 * countdown
 */
function countdown(second, cb) {
    let timer = second;
    let distance = 0;
    cb(timer);
    var interval = setInterval(function() {
        distance += 1;
        timer -= 1;
        cb(timer);
        if(distance >= second) {
            clearInterval(interval);
        }
    }, 1000);
 }

/**
 * Event lestener connecting of soket.io
 */
 function onConnecting(socket) {
    console.log("co nguoi ket noi: ", socket.id);
    /**
     * on dis connect
     */
     socket.on("disconnect", function() {
        console.log("disconnect: " + socket.Username);
        delete currentUser[socket.Username];
        if (socket.Username != "master") {
            io.to(currentUser["master"]).emit("update-list-current-users", currentUser);
        }
    });

     socket.on("send-question", function(data) {
        console.log(data);
        io.sockets.emit("broadcast-all", "câu hỏi: " + data);
        countdown(15, function(timer) {
            io.sockets.emit("countdown", timer);
        });
    });

     socket.on('send-to-test', function(data) {
        console.log('send-to-test : ', currentUser[data.sendTo]);
        io.to(currentUser[data.sendTo]).emit('broadcast-to', "câu hỏi: " + data.content);
    });

     socket.on("current-user", function(data) {
        currentUser[data] = socket.id;
        socket.Username = data;
        if (data != "master" && data != "presentation") {
            socket.join("tests");
        }

        io.to(currentUser["master"]).emit("list-current-users", currentUser);
    });

    socket.on("send-to-tests", function(data) {
        console.log(socket.adapter.rooms);
        io.in('tests').emit("broadcast-to-tests", data);
    });



 }